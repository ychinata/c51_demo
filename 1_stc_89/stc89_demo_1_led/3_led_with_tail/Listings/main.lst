C51 COMPILER V9.54   MAIN                                                                  01/30/2024 23:34:36 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Software\Keil\Keil_ARM\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          //#include <REGX52.H>
   2          
   3          #include <reg52.h>
   4          #include <string.h>
   5          #define MAX(a,b) ((a) > (b) ? (a) : (b))
   6          #define N 16
   7          typedef unsigned char uint8_t;
   8          
   9          /*
  10          下面两个数组每个元素的值是驱动LED的占空比，0（0%）为持续高电平不亮，100（100%）为持续低电平最亮状态
  11          值从大到小对应LED由亮到暗，这些值是我根据运行效果设置的，因为是软件翻转IO控制占空比，占空比也十分不精确
  12          因为运行过程中有左移右移效果，下面两个数组只是初始值，
  13          初始值在每次循环开始，给带下面duties开头的三个数组恢复初值
  14          所有数组大小是16个，led只有8个，只显示数组的前八个，后面八个位置只是为了给移动显示服务，
  15          通过移动数组内容，从全部熄灭，到逐渐显示不同亮度
  16          */
  17          uint8_t code strip_init_left[N] = {0, 0, 0, 0, 0, 0, 0, 0, 100, 50, 25, 12, 6, 3, 1, 0};
  18          uint8_t code strip_init_right[N] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 6, 12, 25, 50, 100};
  19          uint8_t duties[N];
  20          uint8_t duties_left[N];
  21          uint8_t duties_right[N];
  22          
  23          /*右移占空比数组*/
  24          void shift_right_strip(uint8_t *buf, uint8_t len) {
  25   1          uint8_t i, t = buf[len-1];
  26   1          for(i = len-1; i > 0; i--) {
  27   2              buf[i] = buf[i-1];
  28   2          }
  29   1          buf[0] = t;
  30   1      }
  31          /*左移占空比数组*/
  32          void shift_left_strip(uint8_t *buf, uint8_t len) {
  33   1          uint8_t i, n = len-1, t = buf[0];
  34   1          for(i=0; i<n; i++) {
  35   2              buf[i] = buf[i+1];
  36   2          }
  37   1          buf[n] = t;
  38   1      }
  39          /*左移duties_left, 右移duties_right，最后将两个数组合并到duties里*/
  40          void shift_center_strip() {
  41   1          uint8_t i;
  42   1          shift_left_strip(duties_left, N);
  43   1          shift_right_strip(duties_right, N);
  44   1          for(i=0; i<N; i++) {
  45   2              duties[i] = MAX(duties_left[i], duties_right[i]);
  46   2          }
  47   1      }
  48          
  49          /*显示流水灯，翻转IO模拟占空比，cycle是循环次数，cycle越大，流动一次时间间隔越大
  50          values是占空比数据；外层for循环100次，相当于占空比百分之几的分母是100，i跟values[j]比较，
  51          如果i>=values[j],则IO输出高电平关闭LED，否则输出低电平点亮LED，
  52          比如values[j]是40，那么100次循环中前40次循环就是低电平点亮LED，
  53          后60次循环就是高电平关闭LED，达到占空比40%点亮的效果。
  54          里层for循环是分别处理每一个IO的占空比，一共8个，value一共8位，每一位的高低对应一个LED的状态，
C51 COMPILER V9.54   MAIN                                                                  01/30/2024 23:34:36 PAGE 2   

  55          */
  56          void update_leds(uint8_t cycle, uint8_t *values) {
  57   1          uint8_t i, j, value;
  58   1          while(cycle--) {
  59   2              for(i=0; i<100; i++) {
  60   3                  value = 0; // 默认是0，点亮状态
  61   3                  for(j=0; j<8; j++) {
  62   4                      if (i >= values[j]) { // 如果i大于占空比数值
  63   5                          value |= (1<<j);  // 则置1对应位，values[0~7]对应BIT0~BIT7
  64   5                      }
  65   4                  }
  66   3                  P2 = value;
  67   3              }
  68   2          }
  69   1      }
  70          
  71          void main() {
  72   1          uint8_t i;
  73   1          while(1) {
  74   2              // 以下memcpy都是恢复led的初始状态，8个LED全灭
  75   2              memcpy(duties, strip_init_right, N);
  76   2              // 右移，让LED逐个点亮
  77   2              for(i=0; i<9; i++) {
  78   3                  shift_right_strip(duties, N);
  79   3                  update_leds(4, duties);
  80   3              }
  81   2              memcpy(duties, strip_init_left, N);
  82   2              for(i=0; i<9; i++) {
  83   3                  shift_left_strip(duties, N);
  84   3                  update_leds(4, duties);
  85   3                  
  86   3              }
  87   2              memcpy(duties_left, strip_init_left, N);
  88   2              memcpy(duties_right, strip_init_right, N);
  89   2              for(i=0; i<15; i++) {
  90   3                  shift_center_strip();
  91   3                  update_leds(4, duties);
  92   3              }
  93   2          }
  94   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    418    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     48      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
